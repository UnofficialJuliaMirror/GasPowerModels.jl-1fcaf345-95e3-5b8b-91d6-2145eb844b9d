var documenterSearchIndex = {"docs":
[{"location":"#GasPowerModels.jl-Documentation-1","page":"Home","title":"GasPowerModels.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = GasPowerModels","category":"page"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"GasPowerModels.jl is a Julia/JuMP package for Steady-State Gas Network Optimization. It provides utilities for modeling problems that combine elements of natural gas and electric power systems. It is designed to enable computational evaluation of emerging gas and power network formulations and algorithms in a common platform.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The code is engineered to decouple Problem Specifications (e.g. Flow, Expansion Planning, ...) from Network Formulations (e.g. MINLP, MISOC-relaxation, ...). This enables the definition of a wide variety of coupled network formulations and their comparison on common problem specifications.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The latest stable release of GasPowerModels will be installed using the Julia package manager with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.add(\"GasPowerModels\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.checkout(\"GasPowerModels\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"At least one solver is required for running GasModels.  The open-source solver Pavito is recommended and can be used to solve a wide variety of the problems and network formulations provided in GasModels.  The Pavito solver can be installed via the package manager with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.add(\"Pavito\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.test(\"GasPowerModels\")","category":"page"},{"location":"quickguide/#Quick-Start-Guide-1","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Once GasGrid Models is installed, Pavito is installed, and network data files (e.g. \"test/data/belgion.json\", \"test/data/case14.m\") have been acquired, a Gas and Power Flow with SOC relaxations can be executed with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"using GasPowerModels\nusing Pavito\n\nrun_gpf(\"../test/data/case14.m\", \"../test/data/belgian.json\", SOCWRPowerModel, MISOCPGasModel, PavitoSolver())","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Similarly, a full non-convex Gas and Power Flow can be executed with a MINLP solver like","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"run_gpf(\"../test/data/case14.m\", \"../test/data/belgian.json\", ACPowerModel, MINLPGasModel, PavitoSolver())","category":"page"},{"location":"quickguide/#Getting-Results-1","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The run commands in GasPowerModels return detailed results data in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"run_gpf(\"../test/data/case14.m\", \"../test/data/belgian.json\", SOCWRPowerModel, MISOCPGasModel, PavitoSolver())","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime and final objective value can be accessed with,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"]\nresult[\"objective\"]","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the run method. For example, the following dictionary comprehension can be used to inspect the junction pressures in the solution,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"Dict(name => data[\"p\"] for (name, data) in result[\"solution\"][\"junction\"])","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"For more information about GasPowerModels result data see the GasPowerModels Result Data Format section.","category":"page"},{"location":"quickguide/#Inspecting-the-Formulation-1","page":"Getting Started","title":"Inspecting the Formulation","text":"","category":"section"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a run_gpf call into separate model building and solving steps.  This allows inspection of the JuMP model created by GasPowerModels for the gas flow problem,","category":"page"},{"location":"quickguide/#","page":"Getting Started","title":"Getting Started","text":"pm, gm = build_generic_model(\"../test/data/case14.m\", \"../test/data/belgian.json\", SOCWRPowerModel, MISOCPGasModel, GasPowerModels.post_gpf)\n\nprint(gm.model)\nprint(pm.model)\n\nsolve_generic_model(pm, gm, PavitoSolver())","category":"page"},{"location":"network-data/#GasPowerModels-Network-Data-Format-1","page":"Network Data Format","title":"GasPowerModels Network Data Format","text":"","category":"section"},{"location":"network-data/#The-Network-Data-Dictionary-1","page":"Network Data Format","title":"The Network Data Dictionary","text":"","category":"section"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"Internally GasPowerModels utilizes a dictionary to store network data for power systems (see PowerModels) and gas models (see GasModels.jl). The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The I/O for GasPowerModels utilizes the serializations available in PowerModels.jl and GasModels.jl to construct the two network models. All data is assumed to be in per_unit (non dimenisionalized) or SI units.","category":"page"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"Besides the standard network data supported by GasModels.jl and PowerModels.jl, there are a few extra fields that are required to couple the two systems together. These are discussed as follows:","category":"page"},{"location":"network-data/#Gas-Networks-1","page":"Network Data Format","title":"Gas Networks","text":"","category":"section"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"{\n\"energy_factor\": <float>,          # factor for converting the Joules per second used by a generator to m^3 per second gas consumption. SI units are m^3 per Joules\n\"price_zone\":{\n    \"1\":{\n      \"junctions\": <array>,   # array of junction ids for a natural gas price zone\n      \"cost_q\": <array>,      # array of floats that model a quadractic cost curve on non-firm gas consumed in the zone. SI units are dollars per m^3 at standard pressure\n      \"cost_p\": <array>,      # array of floats that model a quadractic cost curve on pressure squared in the zone. SI units are dollars per pascals^2\n      \"min_cost\" <float>,     # minimum cost per unit of non-firm gas consumed in the zone.  SI units are dollars per m^3 at standard pressure\n      \"constant_p\" <float>,   # bias factor for weighting pressure penalty cost relative to demand penalty cost      \n       ...\n    },\n    \"2\":{...},\n    ...\n}\n}","category":"page"},{"location":"network-data/#Power-Networks-1","page":"Network Data Format","title":"Power Networks","text":"","category":"section"},{"location":"network-data/#","page":"Network Data Format","title":"Network Data Format","text":"{\n\"gen\":{\n    \"1\":{\n       \"heat_rate_quad_coeff\":   <float>,  # quadratic term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second   \n       \"heat_rate_linear_coeff\": <float>,  # linear term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second   \n       \"heat_rate_constant_coeff\": <float>,  # constant term of a heat rate curve that converts MW into J/s. SI Units are J per MW produced in a second\n       ...\n    },\n    \"2\":{...},\n    ...\n}\n}","category":"page"},{"location":"result-data/#GasPowerModels-Result-Data-Format-1","page":"Result Data Format","title":"GasPowerModels Result Data Format","text":"","category":"section"},{"location":"result-data/#The-Result-Data-Dictionary-1","page":"Result Data Format","title":"The Result Data Dictionary","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"GasPowerModels utilizes a dictionary to organize the results of a run command. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The data dictionary organization is designed to be consistent with the GasModels The Network Data Dictionary.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"At the top level the results data dictionary is structured as follows:","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"solver\":<string>,       # name of the Julia class used to solve the model\n\"status\":<julia symbol>, # solver status at termination\n\"solve_time\":<float>,    # reported solve time (seconds)\n\"objective\":<float>,     # the final evaluation of the objective function\n\"objective_lb\":<float>,  # the final lower bound of the objective function (if available)\n\"machine\":{...},         # computer hardware information (details below)\n\"data\":{...},            # test case information (details below)\n\"solution\":{...}         # complete solution information (details below)\n}","category":"page"},{"location":"result-data/#Machine-Data-1","page":"Result Data Format","title":"Machine Data","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"This object provides basic information about the hardware that was  used when the run command was called.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"cpu\":<string>,    # CPU product name\n\"memory\":<string>  # the amount of system memory (units given)\n}","category":"page"},{"location":"result-data/#Solution-Data-1","page":"Result Data Format","title":"Solution Data","text":"","category":"section"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"The solution object provides detailed information about the solution  produced by the run command.  The solution is organized similarly to  The Network Data Dictionary with the same nested structure and  parameter names, when available.  A network solution most often only includes a small subset of the data included in the network data.","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"For example the data for a junction, data[\"price_zone\"][\"1\"] is structured as follows,","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"min_cost\": 700,\n...\n}","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"A solution specifying a pressure for the same case, i.e. result[\"solution\"][\"price_zone\"][\"1\"], would result in,","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"ql\": 200,\n}","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"Because the data dictionary and the solution dictionary have the same structure  InfrastructureModels update_data! helper function can be used to  update a data dictionary with the values from a solution as follows,","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"InfrastructureModels.update_data!(data, result[\"solution\"])","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"By default, all results are reported in per-unit (non-dimenionalized). Below are common outputs of implemented optimization models","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"GasModels.addsetpoint(sol, gm, \"pricezone\", \"lm\",    :zonecost)     GasModels.addsetpoint(sol, gm, \"pricezone\", \"lf\",    :zonefl)     GasModels.addsetpoint(sol, gm, \"pricezone\", \"lq\",    :zoneql, scale = (x,item) -> GasModels.getvalue(x) / gm.data[\"standarddensity\"])       GasModels.addsetpoint(sol, gm, \"pricezone\", \"lp\",    :pcost)     GasModels.addsetpoint(sol, gm, \"pricezone\", \"maxp\", :zone_p)  ","category":"page"},{"location":"result-data/#","page":"Result Data Format","title":"Result Data Format","text":"{\n\"price_zone\":{\n    \"1\":{\n      \"lm\": <float>,     # cost incurred by the zone for satisfying non firm demand. \n      \"lf\": <float>,     # non firm demand in the zone in terms of mass flux. Reported in per unit,  Multiply by baseQ to get kg/s\n      \"lq\": <float>,     # non firm demand in the zone in terms of volume flux. Reported in per unit,  Multiply by baseQ to get m^3/s     \n      \"lp\": <float>,     # cost incurred by the zone by high pressure     \n      \"max_p\": <float>,  # Maximum pressure squared in the zone. Reported in per unit.  Multiply by baseP^2 to get pascals   \n      ...\n    },\n    \"2\":{...},\n    ...\n}}","category":"page"},{"location":"math-model/#The-GasPowerModels-Mathematical-Model-1","page":"Mathematical Model","title":"The GasPowerModels Mathematical Model","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"As GasPowerModels implements a variety of coupled gas grid network optimization problems, the implementation is the best reference for precise mathematical formulations.  This section provides a mathematical specification for a prototypical coupled gas grid Flow problem, to provide an overview of the typical mathematical models in GasPowerModels.","category":"page"},{"location":"math-model/#Coupled-Gas-Electric-Power-Flow-1","page":"Mathematical Model","title":"Coupled Gas Electric Power Flow","text":"","category":"section"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"GasPowerModels implements a steady-state model of gas flow and power flow based on the implementations of gas flows in GasModels.jl and power flows in PowerModels.jl.  The key coupling constraint between power and gas systems is through generators that consume gas to produce power.  This is expressed in terms of a heat rate curve, i.e.","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"f = e * rho (h_2 * pg^2 + h_1 * pg + h_0)","category":"page"},{"location":"math-model/#","page":"Mathematical Model","title":"Mathematical Model","text":"where h is a quadratic function used to convert MW (pg) into Joules consumed per second. This is then converted to mass flow, f, (kg/s) of gas consumed to produce this energy. Here, e is an energy factor (m^3/s) and rho is standard density (kg/m^3).","category":"page"},{"location":"formulations/#Network-Formulations-1","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/#","page":"Network Formulations","title":"Network Formulations","text":"The network formulations for coupled gas grid modeling directly use the formulations defined in GasModels.jl and PowerModels.jl","category":"page"},{"location":"specifications/#Problem-Specifications-1","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"In these specifications, pm refers to a power system model and gm refers to a gas system model","category":"page"},{"location":"specifications/#Coupled-Gas-Power-Flow-(GPF)-1","page":"Problem Specifications","title":"Coupled Gas Power Flow (GPF)","text":"","category":"section"},{"location":"specifications/#Variables-1","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"PowerModels.variable_voltage(pm)\nPowerModels.variable_generation(pm)\nPowerModels.variable_branch_flow(pm)\nPowerModels.variable_dcline_flow(pm)\n\nGasModels.variable_flow(gm)  \nGasModels.variable_pressure_sqr(gm)\nGasModels.variable_valve_operation(gm)\nGasModels.variable_load_mass_flow(gm)\nGasModels.variable_production_mass_flow(gm)","category":"page"},{"location":"specifications/#Constraints-1","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"PowerModels.constraint_model_voltage(pm)\n\nfor i in PowerModels.ids(pm, :ref_buses)\n    PowerModels.constraint_theta_ref(pm, i)\n    PowerModels.constraint_voltage_magnitude_setpoint(pm, i)\nend\n\nfor i in PowerModels.ids(pm, :bus)\n    PowerModels.constraint_power_balance_shunt(pm, i)\n    if length(ref(pm, :bus_gens, i)) > 0 && !(i in ids(pm,:ref_buses))\n        PowerModels.constraint_voltage_magnitude_setpoint(pm, i)\n        for j in ref(pm, :bus_gens, i)\n            PowerModels.constraint_active_gen_setpoint(pm, j)\n        end\n    end\nend\n\nfor i in PowerModels.ids(pm, :branch)\n    PowerModels.constraint_ohms_yt_from(pm, i)\n    PowerModels.constraint_ohms_yt_to(pm, i)\nend\n\nfor i in PowerModels.ids(pm, :dcline)\n    PowerModels.constraint_active_dcline_setpoint(pm, i)\n\n    f_bus = PowerModels.ref(pm, :bus)[dcline[\"f_bus\"]]\n    if f_bus[\"bus_type\"] == 1\n        PowerModels.constraint_voltage_magnitude_setpoint(pm, f_bus[\"index\"])\n    end\n\n    t_bus = PowerModels.ref(pm, :bus)[dcline[\"t_bus\"]]\n    if t_bus[\"bus_type\"] == 1\n        PowerModels.constraint_voltage_magnitude_setpoint(pm, t_bus[\"index\"])\n    end\nend\n\nfor i in [collect(GasModels.ids(gm,:pipe)); collect(GasModels.ids(gm,:resistor))] \n    GasModels.constraint_pipe_flow(gm, i) \nend\n    \nfor i in GasModels.ids(gm, :junction)\n    GasModels.constraint_junction_mass_flow_ls(gm, i)      \nend\n    \nfor i in GasModels.ids(gm, :short_pipe)\n    GasModels.constraint_short_pipe_flow(gm, i) \nend\n        \nfor i in GasModels.ids(gm, :compressor) \n    GasModels.constraint_compressor_flow(gm, i) \nend\n    \nfor i in GasModels.ids(gm, :valve)     \n    GasModels.constraint_valve_flow(gm, i) \nend\n    \nfor i in GasModels.ids(gm, :control_valve) \n    GasModels.constraint_control_valve_flow(gm, i) \nend\n\nfor i in GasModels.ids(gm, :consumer)\n    constraint_heat_rate_curve(pm, gm, i)\nend","category":"page"},{"location":"specifications/#Expansion-Planning-(NE)-1","page":"Problem Specifications","title":"Expansion Planning (NE)","text":"","category":"section"},{"location":"specifications/#Objective-1","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_ne_cost(pm, gm)","category":"page"},{"location":"specifications/#Variables-2","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"PowerModels.variable_branch_ne(pm)\nPowerModels.variable_voltage(pm)\nPowerModels.variable_voltage_ne(pm)\nPowerModels.variable_generation(pm)     \nPowerModels.variable_branch_flow(pm)    \nPowerModels.variable_dcline_flow(pm)    \nPowerModels.variable_branch_flow_ne(pm) \nPowerModels.constraint_model_voltage(pm)\nPowerModels.constraint_model_voltage_ne(pm)\n\nGasModels.variable_flow(gm)          \nGasModels.variable_pressure_sqr(gm)\nGasModels.variable_valve_operation(gm)\nGasModels.variable_load_mass_flow(gm)  \nGasModels.variable_production_mass_flow(gm)\nGasModels.variable_pipe_ne(gm)\nGasModels.variable_compressor_ne(gm)\nGasModels.variable_flow_ne(gm)","category":"page"},{"location":"specifications/#Constraints-2","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"PowerModels.constraint_model_voltage(pm)      \nPowerModels.constraint_model_voltage_ne(pm)   \n\nfor i in ids(pm, :ref_buses)\n    PowerModels.constraint_theta_ref(pm, i)  \nend\n\nfor i in ids(pm, :bus)\n    PowerModels.constraint_power_balance_shunt_ne(pm, i) \nend\n\nfor i in ids(pm, :branch)\n    PowerModels.constraint_ohms_yt_from(pm, i)\n    PowerModels.constraint_ohms_yt_to(pm, i)  \n    PowerModels.constraint_voltage_angle_difference(pm, i)\n    PowerModels.constraint_thermal_limit_from(pm, i)\n    PowerModels.constraint_thermal_limit_to(pm, i)  \nend\n\nfor i in ids(pm, :ne_branch)\n    PowerModels.constraint_ohms_yt_from_ne(pm, i)             \n    PowerModels.constraint_ohms_yt_to_ne(pm, i)               \n    PowerModels.constraint_voltage_angle_difference_ne(pm, i) \n    PowerModels.constraint_thermal_limit_from_ne(pm, i)       \n    PowerModels.constraint_thermal_limit_to_ne(pm, i)         \nend\n\nfor i in GasModels.ids(gm, :junction)\n    GasModels.constraint_junction_mass_flow_ne_ls(gm, i) \nend\n\nfor i in [collect(GasModels.ids(gm,:pipe)); collect(GasModels.ids(gm,:resistor))] \n    GasModels.constraint_pipe_flow_ne(gm, i)\nend\n\nfor i in GasModels.ids(gm,:ne_pipe) \n    GasModels.constraint_new_pipe_flow_ne(gm, i)\nend\n    \nfor i in GasModels.ids(gm, :short_pipe) \n    GasModels.constraint_short_pipe_flow_ne(gm, i)\nend\n    \nfor i in GasModels.ids(gm,:compressor)       \n    GasModels.constraint_compressor_flow_ne(gm, i)\nend\n \nfor i in GasModels.ids(gm, :ne_compressor) \n    GasModels.constraint_new_compressor_flow_ne(gm, i)\nend  \n          \nfor i in GasModels.ids(gm, :valve)     \n    GasModels.constraint_valve_flow(gm, i)\nend\n    \nfor i in GasModels.ids(gm, :control_valve) \n    GasModels.constraint_control_valve_flow(gm, i)       \nend\n\nfor i in GasModels.ids(gm, :consumer)\n    constraint_heat_rate_curve(pm, gm, i)\nend    \n","category":"page"},{"location":"specifications/#Expansion-Planning-with-Optimal-Power-Flow-(NEOPF)-1","page":"Problem Specifications","title":"Expansion Planning with Optimal Power Flow (NEOPF)","text":"","category":"section"},{"location":"specifications/#Objective-2","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_ne_opf_cost","category":"page"},{"location":"specifications/#Variables-3","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"NE Model variables and","category":"page"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"variable_zone_demand(gm)\nvariable_zone_demand_price(gm)\nvariable_zone_pressure(gm)\nvariable_pressure_price(gm)","category":"page"},{"location":"specifications/#Constraints-3","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"NE Model constraints and ","category":"page"},{"location":"specifications/#","page":"Problem Specifications","title":"Problem Specifications","text":"for (i, price_zone) in gm.ref[:nw][n][:price_zone]\n    constraint_zone_demand(gm, i)\n    constraint_zone_demand_price(gm, i)\n    constraint_zone_pressure(gm, i)\n    constraint_pressure_price(gm, i)\nend","category":"page"},{"location":"model/#Gas-Grid-Model-1","page":"GasGridModel","title":"Gas Grid Model","text":"","category":"section"},{"location":"model/#","page":"GasGridModel","title":"GasGridModel","text":"A gas grid model is defined in terms of a GasModel and a PowerModel.","category":"page"},{"location":"objective/#Objective-1","page":"Objective","title":"Objective","text":"","category":"section"},{"location":"objective/#","page":"Objective","title":"Objective","text":"Modules = [GasPowerModels]\nPages   = [\"core/objective.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"variables/#Variables-1","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"variables/#","page":"Variables","title":"Variables","text":"We provide the following methods to provide a compositional approach for defining common variables used in coupled gas grid flow models. These methods should always be defined over \"GenericGasModels\" and/or \"GenericPowerModels\".","category":"page"},{"location":"variables/#","page":"Variables","title":"Variables","text":"Modules = [GasPowerModels]\nPages   = [\"core/variable.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"variables/#GasPowerModels.getstart","page":"Variables","title":"GasPowerModels.getstart","text":"extracts the start value \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_pressure_price","page":"Variables","title":"GasPowerModels.variable_pressure_price","text":"function for creating variables associated with zonal pressure cost \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_zone_demand","page":"Variables","title":"GasPowerModels.variable_zone_demand","text":"function for creating variables associated with zonal demand \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_zone_demand_price","page":"Variables","title":"GasPowerModels.variable_zone_demand_price","text":"function for creating variables associated with zonal demand \n\n\n\n\n\n","category":"function"},{"location":"variables/#GasPowerModels.variable_zone_pressure","page":"Variables","title":"GasPowerModels.variable_zone_pressure","text":"function for creating variables associated with zonal demand \n\n\n\n\n\n","category":"function"},{"location":"constraints/#Constraints-1","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints/#","page":"Constraints","title":"Constraints","text":"Modules = [GasPowerModels]\nPages   = [\"core/constraint_template.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"constraints/#GasPowerModels.constraint_heat_rate_curve-Union{Tuple{G}, Tuple{GenericPowerModel,GenericGasModel{G},Any,Any}} where G<:GasModels.AbstractGasFormulation","page":"Constraints","title":"GasPowerModels.constraint_heat_rate_curve","text":"Assumption is J/s\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_pressure_price-Tuple{GasModels.GenericGasModel,Int64,Any}","page":"Constraints","title":"GasPowerModels.constraint_pressure_price","text":"constraints associated with pressure prices  This is equation 25 in the HICCS paper\n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_zone_demand-Tuple{GasModels.GenericGasModel,Int64,Any}","page":"Constraints","title":"GasPowerModels.constraint_zone_demand","text":"constraints associated with bounding the demand zone prices  This is equation 23 in the HICCS paper \n\n\n\n\n\n","category":"method"},{"location":"constraints/#GasPowerModels.constraint_zone_demand_price-Tuple{GasModels.GenericGasModel,Int64,Any}","page":"Constraints","title":"GasPowerModels.constraint_zone_demand_price","text":"constraints associated with bounding the demand zone prices  This is equation 22 in the HICCS paper\n\n\n\n\n\n","category":"method"},{"location":"parser/#File-IO-1","page":"File IO","title":"File IO","text":"","category":"section"},{"location":"parser/#","page":"File IO","title":"File IO","text":"Parsing uses the native parsing features of GasModels.jl and PowerModels.jl","category":"page"},{"location":"developer/#Developer-Documentation-1","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"Nothing yet.","category":"page"}]
}
